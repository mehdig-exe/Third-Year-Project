{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fourth try"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from mpl_toolkits import mplot3d\n",
    "from matplotlib.animation import FuncAnimation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('Data.csv', sep = \",\")\n",
    "\n",
    "data_index = data.set_index(['UID','No']).sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot x data for each sensor (UID)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_plot_x(num):\n",
    "    data_index_x = data_index.loc[num]\n",
    "    data_x = pd.pivot_table(data_index_x, ['X'], 'No')\n",
    "    data_x.plot()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "num = 1000101017\n",
    "data_plot_x(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot x data for all sensors together"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_per_UID_plot(num):\n",
    "    data_per_UID = data_index.loc[num]\n",
    "    data_per_UID_table = pd.pivot_table(data_per_UID, ['X', 'Y', 'Z', 'T'], 'No')\n",
    "    data_per_UID_table.plot()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "num = 1000101017\n",
    "data_per_UID_plot(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_per_UID_plot_temp(num):\n",
    "    data_per_UID_temp = data_index.loc[num]\n",
    "    data_per_UID_table_temp = pd.pivot_table(data_per_UID_temp, ['X', 'Y', 'Z'], 'T')\n",
    "    data_per_UID_table_temp.plot()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "num = 1000101017\n",
    "data_per_UID_plot_temp(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num = 1000101017\n",
    "\n",
    "for num <= 1000101026:\n",
    "    data_per_UID_plot(num)\n",
    "    num = num + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x1 = np.genfromtxt('AngleData.csv',delimiter=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "angleArray,index = [],[]\n",
    "\n",
    "for i,j in enumerate(x1[0:len(x1)-1]):\n",
    "    a = x1[i]\n",
    "    b = x1[i+1]\n",
    "    A = np.linalg.norm(a)\n",
    "    B = np.linalg.norm(b)\n",
    "    ans = np.arccos((np.dot(a,b))/(A*B))\n",
    "    angleArray.append(ans)\n",
    "    index.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "angleArray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
